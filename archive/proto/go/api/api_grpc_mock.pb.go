// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: api.proto

package server

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockAppServerClient is a mock of AppServerClient interface.
type MockAppServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockAppServerClientMockRecorder
}

// MockAppServerClientMockRecorder is the mock recorder for MockAppServerClient.
type MockAppServerClientMockRecorder struct {
	mock *MockAppServerClient
}

// NewMockAppServerClient creates a new mock instance.
func NewMockAppServerClient(ctrl *gomock.Controller) *MockAppServerClient {
	mock := &MockAppServerClient{ctrl: ctrl}
	mock.recorder = &MockAppServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppServerClient) EXPECT() *MockAppServerClientMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAppServerClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Authorize", varargs...)
	ret0, _ := ret[0].(*AuthorizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAppServerClientMockRecorder) Authorize(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAppServerClient)(nil).Authorize), varargs...)
}

// Chat mocks base method.
func (m *MockAppServerClient) Chat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Chat", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat.
func (mr *MockAppServerClientMockRecorder) Chat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockAppServerClient)(nil).Chat), varargs...)
}

// GetAppSchema mocks base method.
func (m *MockAppServerClient) GetAppSchema(ctx context.Context, in *AppSchemaRequest, opts ...grpc.CallOption) (*AppSchemaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppSchema", varargs...)
	ret0, _ := ret[0].(*AppSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppSchema indicates an expected call of GetAppSchema.
func (mr *MockAppServerClientMockRecorder) GetAppSchema(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppSchema", reflect.TypeOf((*MockAppServerClient)(nil).GetAppSchema), varargs...)
}

// GetAppScreen mocks base method.
func (m *MockAppServerClient) GetAppScreen(ctx context.Context, in *GetAppScreenRequest, opts ...grpc.CallOption) (*GetAppScreenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppScreen", varargs...)
	ret0, _ := ret[0].(*GetAppScreenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppScreen indicates an expected call of GetAppScreen.
func (mr *MockAppServerClientMockRecorder) GetAppScreen(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppScreen", reflect.TypeOf((*MockAppServerClient)(nil).GetAppScreen), varargs...)
}

// GoogleAuthCallback mocks base method.
func (m *MockAppServerClient) GoogleAuthCallback(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GoogleAuthCallback", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GoogleAuthCallback indicates an expected call of GoogleAuthCallback.
func (mr *MockAppServerClientMockRecorder) GoogleAuthCallback(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoogleAuthCallback", reflect.TypeOf((*MockAppServerClient)(nil).GoogleAuthCallback), varargs...)
}

// Ping mocks base method.
func (m *MockAppServerClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockAppServerClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAppServerClient)(nil).Ping), varargs...)
}

// MockAppServerServer is a mock of AppServerServer interface.
type MockAppServerServer struct {
	ctrl     *gomock.Controller
	recorder *MockAppServerServerMockRecorder
}

// MockAppServerServerMockRecorder is the mock recorder for MockAppServerServer.
type MockAppServerServerMockRecorder struct {
	mock *MockAppServerServer
}

// NewMockAppServerServer creates a new mock instance.
func NewMockAppServerServer(ctrl *gomock.Controller) *MockAppServerServer {
	mock := &MockAppServerServer{ctrl: ctrl}
	mock.recorder = &MockAppServerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppServerServer) EXPECT() *MockAppServerServerMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAppServerServer) Authorize(ctx context.Context, in *AuthorizeRequest) (*AuthorizeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", ctx, in)
	ret0, _ := ret[0].(*AuthorizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAppServerServerMockRecorder) Authorize(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAppServerServer)(nil).Authorize), ctx, in)
}

// Chat mocks base method.
func (m *MockAppServerServer) Chat(ctx context.Context, in *Request) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat", ctx, in)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat.
func (mr *MockAppServerServerMockRecorder) Chat(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockAppServerServer)(nil).Chat), ctx, in)
}

// GetAppSchema mocks base method.
func (m *MockAppServerServer) GetAppSchema(ctx context.Context, in *AppSchemaRequest) (*AppSchemaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppSchema", ctx, in)
	ret0, _ := ret[0].(*AppSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppSchema indicates an expected call of GetAppSchema.
func (mr *MockAppServerServerMockRecorder) GetAppSchema(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppSchema", reflect.TypeOf((*MockAppServerServer)(nil).GetAppSchema), ctx, in)
}

// GetAppScreen mocks base method.
func (m *MockAppServerServer) GetAppScreen(ctx context.Context, in *GetAppScreenRequest) (*GetAppScreenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppScreen", ctx, in)
	ret0, _ := ret[0].(*GetAppScreenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppScreen indicates an expected call of GetAppScreen.
func (mr *MockAppServerServerMockRecorder) GetAppScreen(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppScreen", reflect.TypeOf((*MockAppServerServer)(nil).GetAppScreen), ctx, in)
}

// GoogleAuthCallback mocks base method.
func (m *MockAppServerServer) GoogleAuthCallback(ctx context.Context, in *AuthorizeRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoogleAuthCallback", ctx, in)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GoogleAuthCallback indicates an expected call of GoogleAuthCallback.
func (mr *MockAppServerServerMockRecorder) GoogleAuthCallback(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoogleAuthCallback", reflect.TypeOf((*MockAppServerServer)(nil).GoogleAuthCallback), ctx, in)
}

// Ping mocks base method.
func (m *MockAppServerServer) Ping(ctx context.Context, in *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, in)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockAppServerServerMockRecorder) Ping(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAppServerServer)(nil).Ping), ctx, in)
}
