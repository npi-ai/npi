// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: api/api.proto

package server

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockChatServer_ChatClient is a mock of ChatServer_ChatClient interface.
type MockChatServer_ChatClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatServer_ChatClientMockRecorder
}

// MockChatServer_ChatClientMockRecorder is the mock recorder for MockChatServer_ChatClient.
type MockChatServer_ChatClientMockRecorder struct {
	mock *MockChatServer_ChatClient
}

// NewMockChatServer_ChatClient creates a new mock instance.
func NewMockChatServer_ChatClient(ctrl *gomock.Controller) *MockChatServer_ChatClient {
	mock := &MockChatServer_ChatClient{ctrl: ctrl}
	mock.recorder = &MockChatServer_ChatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatServer_ChatClient) EXPECT() *MockChatServer_ChatClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockChatServer_ChatClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockChatServer_ChatClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockChatServer_ChatClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockChatServer_ChatClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockChatServer_ChatClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockChatServer_ChatClient)(nil).Context))
}

// Header mocks base method.
func (m *MockChatServer_ChatClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockChatServer_ChatClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockChatServer_ChatClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockChatServer_ChatClient) Recv() (*ChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockChatServer_ChatClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockChatServer_ChatClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockChatServer_ChatClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockChatServer_ChatClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockChatServer_ChatClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockChatServer_ChatClient) Send(arg0 *ChatRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockChatServer_ChatClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockChatServer_ChatClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockChatServer_ChatClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockChatServer_ChatClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockChatServer_ChatClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockChatServer_ChatClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockChatServer_ChatClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockChatServer_ChatClient)(nil).Trailer))
}

// MockChatServer_ChatServer is a mock of ChatServer_ChatServer interface.
type MockChatServer_ChatServer struct {
	ctrl     *gomock.Controller
	recorder *MockChatServer_ChatServerMockRecorder
}

// MockChatServer_ChatServerMockRecorder is the mock recorder for MockChatServer_ChatServer.
type MockChatServer_ChatServerMockRecorder struct {
	mock *MockChatServer_ChatServer
}

// NewMockChatServer_ChatServer creates a new mock instance.
func NewMockChatServer_ChatServer(ctrl *gomock.Controller) *MockChatServer_ChatServer {
	mock := &MockChatServer_ChatServer{ctrl: ctrl}
	mock.recorder = &MockChatServer_ChatServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatServer_ChatServer) EXPECT() *MockChatServer_ChatServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockChatServer_ChatServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockChatServer_ChatServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockChatServer_ChatServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockChatServer_ChatServer) Recv() (*ChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockChatServer_ChatServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockChatServer_ChatServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockChatServer_ChatServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockChatServer_ChatServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockChatServer_ChatServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockChatServer_ChatServer) Send(arg0 *ChatRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockChatServer_ChatServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockChatServer_ChatServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockChatServer_ChatServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockChatServer_ChatServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockChatServer_ChatServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockChatServer_ChatServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockChatServer_ChatServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockChatServer_ChatServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockChatServer_ChatServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockChatServer_ChatServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockChatServer_ChatServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockChatServer_ChatServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockChatServer_ChatServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockChatServer_ChatServer)(nil).SetTrailer), arg0)
}

// MockChatServerClient is a mock of ChatServerClient interface.
type MockChatServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatServerClientMockRecorder
}

// MockChatServerClientMockRecorder is the mock recorder for MockChatServerClient.
type MockChatServerClientMockRecorder struct {
	mock *MockChatServerClient
}

// NewMockChatServerClient creates a new mock instance.
func NewMockChatServerClient(ctrl *gomock.Controller) *MockChatServerClient {
	mock := &MockChatServerClient{ctrl: ctrl}
	mock.recorder = &MockChatServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatServerClient) EXPECT() *MockChatServerClientMockRecorder {
	return m.recorder
}

// Chat mocks base method.
func (m *MockChatServerClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatServer_ChatClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Chat", varargs...)
	ret0, _ := ret[0].(ChatServer_ChatClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat.
func (mr *MockChatServerClientMockRecorder) Chat(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockChatServerClient)(nil).Chat), varargs...)
}

// MockChatServerServer is a mock of ChatServerServer interface.
type MockChatServerServer struct {
	ctrl     *gomock.Controller
	recorder *MockChatServerServerMockRecorder
}

// MockChatServerServerMockRecorder is the mock recorder for MockChatServerServer.
type MockChatServerServerMockRecorder struct {
	mock *MockChatServerServer
}

// NewMockChatServerServer creates a new mock instance.
func NewMockChatServerServer(ctrl *gomock.Controller) *MockChatServerServer {
	mock := &MockChatServerServer{ctrl: ctrl}
	mock.recorder = &MockChatServerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatServerServer) EXPECT() *MockChatServerServerMockRecorder {
	return m.recorder
}

// Chat mocks base method.
func (m *MockChatServerServer) Chat(server ChatServer_ChatServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat", server)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chat indicates an expected call of Chat.
func (mr *MockChatServerServerMockRecorder) Chat(server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockChatServerServer)(nil).Chat), server)
}
