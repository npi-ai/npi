// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: controller.proto

package server

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockControllerClient is a mock of ControllerClient interface.
type MockControllerClient struct {
	ctrl     *gomock.Controller
	recorder *MockControllerClientMockRecorder
}

// MockControllerClientMockRecorder is the mock recorder for MockControllerClient.
type MockControllerClientMockRecorder struct {
	mock *MockControllerClient
}

// NewMockControllerClient creates a new mock instance.
func NewMockControllerClient(ctrl *gomock.Controller) *MockControllerClient {
	mock := &MockControllerClient{ctrl: ctrl}
	mock.recorder = &MockControllerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerClient) EXPECT() *MockControllerClientMockRecorder {
	return m.recorder
}

// Heartbeat mocks base method.
func (m *MockControllerClient) Heartbeat(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Heartbeat", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockControllerClientMockRecorder) Heartbeat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockControllerClient)(nil).Heartbeat), varargs...)
}

// RegisterTool mocks base method.
func (m *MockControllerClient) RegisterTool(ctx context.Context, in *RegisterToolRequest, opts ...grpc.CallOption) (*RegisterToolResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterTool", varargs...)
	ret0, _ := ret[0].(*RegisterToolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTool indicates an expected call of RegisterTool.
func (mr *MockControllerClientMockRecorder) RegisterTool(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTool", reflect.TypeOf((*MockControllerClient)(nil).RegisterTool), varargs...)
}

// UnregisterTool mocks base method.
func (m *MockControllerClient) UnregisterTool(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnregisterTool", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterTool indicates an expected call of UnregisterTool.
func (mr *MockControllerClientMockRecorder) UnregisterTool(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterTool", reflect.TypeOf((*MockControllerClient)(nil).UnregisterTool), varargs...)
}

// MockControllerServer is a mock of ControllerServer interface.
type MockControllerServer struct {
	ctrl     *gomock.Controller
	recorder *MockControllerServerMockRecorder
}

// MockControllerServerMockRecorder is the mock recorder for MockControllerServer.
type MockControllerServerMockRecorder struct {
	mock *MockControllerServer
}

// NewMockControllerServer creates a new mock instance.
func NewMockControllerServer(ctrl *gomock.Controller) *MockControllerServer {
	mock := &MockControllerServer{ctrl: ctrl}
	mock.recorder = &MockControllerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerServer) EXPECT() *MockControllerServerMockRecorder {
	return m.recorder
}

// Heartbeat mocks base method.
func (m *MockControllerServer) Heartbeat(ctx context.Context, in *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Heartbeat", ctx, in)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockControllerServerMockRecorder) Heartbeat(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockControllerServer)(nil).Heartbeat), ctx, in)
}

// RegisterTool mocks base method.
func (m *MockControllerServer) RegisterTool(ctx context.Context, in *RegisterToolRequest) (*RegisterToolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTool", ctx, in)
	ret0, _ := ret[0].(*RegisterToolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTool indicates an expected call of RegisterTool.
func (mr *MockControllerServerMockRecorder) RegisterTool(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTool", reflect.TypeOf((*MockControllerServer)(nil).RegisterTool), ctx, in)
}

// UnregisterTool mocks base method.
func (m *MockControllerServer) UnregisterTool(ctx context.Context, in *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterTool", ctx, in)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterTool indicates an expected call of UnregisterTool.
func (mr *MockControllerServerMockRecorder) UnregisterTool(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterTool", reflect.TypeOf((*MockControllerServer)(nil).UnregisterTool), ctx, in)
}
