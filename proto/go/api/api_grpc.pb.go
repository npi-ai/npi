// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: api.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppServer_Chat_FullMethodName         = "/npi.core.api.AppServer/Chat"
	AppServer_GetAppSchema_FullMethodName = "/npi.core.api.AppServer/GetAppSchema"
)

// AppServerClient is the client API for AppServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServerClient interface {
	Chat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetAppSchema(ctx context.Context, in *AppSchemaRequest, opts ...grpc.CallOption) (*AppSchemaResponse, error)
}

type appServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServerClient(cc grpc.ClientConnInterface) AppServerClient {
	return &appServerClient{cc}
}

func (c *appServerClient) Chat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, AppServer_Chat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServerClient) GetAppSchema(ctx context.Context, in *AppSchemaRequest, opts ...grpc.CallOption) (*AppSchemaResponse, error) {
	out := new(AppSchemaResponse)
	err := c.cc.Invoke(ctx, AppServer_GetAppSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServerServer is the server API for AppServer service.
// All implementations should embed UnimplementedAppServerServer
// for forward compatibility
type AppServerServer interface {
	Chat(context.Context, *Request) (*Response, error)
	GetAppSchema(context.Context, *AppSchemaRequest) (*AppSchemaResponse, error)
}

// UnimplementedAppServerServer should be embedded to have forward compatible implementations.
type UnimplementedAppServerServer struct {
}

func (UnimplementedAppServerServer) Chat(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedAppServerServer) GetAppSchema(context.Context, *AppSchemaRequest) (*AppSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSchema not implemented")
}

// UnsafeAppServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServerServer will
// result in compilation errors.
type UnsafeAppServerServer interface {
	mustEmbedUnimplementedAppServerServer()
}

func RegisterAppServerServer(s grpc.ServiceRegistrar, srv AppServerServer) {
	s.RegisterService(&AppServer_ServiceDesc, srv)
}

func _AppServer_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServerServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppServer_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServerServer).Chat(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppServer_GetAppSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServerServer).GetAppSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppServer_GetAppSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServerServer).GetAppSchema(ctx, req.(*AppSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppServer_ServiceDesc is the grpc.ServiceDesc for AppServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "npi.core.api.AppServer",
	HandlerType: (*AppServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _AppServer_Chat_Handler,
		},
		{
			MethodName: "GetAppSchema",
			Handler:    _AppServer_GetAppSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
