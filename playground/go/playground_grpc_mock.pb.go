// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: playground.proto

package playground

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockPlaygroundClient is a mock of PlaygroundClient interface.
type MockPlaygroundClient struct {
	ctrl     *gomock.Controller
	recorder *MockPlaygroundClientMockRecorder
}

// MockPlaygroundClientMockRecorder is the mock recorder for MockPlaygroundClient.
type MockPlaygroundClientMockRecorder struct {
	mock *MockPlaygroundClient
}

// NewMockPlaygroundClient creates a new mock instance.
func NewMockPlaygroundClient(ctrl *gomock.Controller) *MockPlaygroundClient {
	mock := &MockPlaygroundClient{ctrl: ctrl}
	mock.recorder = &MockPlaygroundClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaygroundClient) EXPECT() *MockPlaygroundClientMockRecorder {
	return m.recorder
}

// Chat mocks base method.
func (m *MockPlaygroundClient) Chat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Chat", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat.
func (mr *MockPlaygroundClientMockRecorder) Chat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockPlaygroundClient)(nil).Chat), varargs...)
}

// GetAppScreen mocks base method.
func (m *MockPlaygroundClient) GetAppScreen(ctx context.Context, in *GetAppScreenRequest, opts ...grpc.CallOption) (*GetAppScreenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppScreen", varargs...)
	ret0, _ := ret[0].(*GetAppScreenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppScreen indicates an expected call of GetAppScreen.
func (mr *MockPlaygroundClientMockRecorder) GetAppScreen(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppScreen", reflect.TypeOf((*MockPlaygroundClient)(nil).GetAppScreen), varargs...)
}

// Ping mocks base method.
func (m *MockPlaygroundClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockPlaygroundClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPlaygroundClient)(nil).Ping), varargs...)
}

// MockPlaygroundServer is a mock of PlaygroundServer interface.
type MockPlaygroundServer struct {
	ctrl     *gomock.Controller
	recorder *MockPlaygroundServerMockRecorder
}

// MockPlaygroundServerMockRecorder is the mock recorder for MockPlaygroundServer.
type MockPlaygroundServerMockRecorder struct {
	mock *MockPlaygroundServer
}

// NewMockPlaygroundServer creates a new mock instance.
func NewMockPlaygroundServer(ctrl *gomock.Controller) *MockPlaygroundServer {
	mock := &MockPlaygroundServer{ctrl: ctrl}
	mock.recorder = &MockPlaygroundServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaygroundServer) EXPECT() *MockPlaygroundServerMockRecorder {
	return m.recorder
}

// Chat mocks base method.
func (m *MockPlaygroundServer) Chat(ctx context.Context, in *Request) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat", ctx, in)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat.
func (mr *MockPlaygroundServerMockRecorder) Chat(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockPlaygroundServer)(nil).Chat), ctx, in)
}

// GetAppScreen mocks base method.
func (m *MockPlaygroundServer) GetAppScreen(ctx context.Context, in *GetAppScreenRequest) (*GetAppScreenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppScreen", ctx, in)
	ret0, _ := ret[0].(*GetAppScreenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppScreen indicates an expected call of GetAppScreen.
func (mr *MockPlaygroundServerMockRecorder) GetAppScreen(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppScreen", reflect.TypeOf((*MockPlaygroundServer)(nil).GetAppScreen), ctx, in)
}

// Ping mocks base method.
func (m *MockPlaygroundServer) Ping(ctx context.Context, in *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, in)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockPlaygroundServerMockRecorder) Ping(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPlaygroundServer)(nil).Ping), ctx, in)
}
