// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: playground.proto

package playground

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Playground_Chat_FullMethodName         = "/npi.playground.api.Playground/Chat"
	Playground_GetAppScreen_FullMethodName = "/npi.playground.api.Playground/GetAppScreen"
	Playground_Ping_FullMethodName         = "/npi.playground.api.Playground/Ping"
)

// PlaygroundClient is the client API for Playground service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaygroundClient interface {
	Chat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetAppScreen(ctx context.Context, in *GetAppScreenRequest, opts ...grpc.CallOption) (*GetAppScreenResponse, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type playgroundClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaygroundClient(cc grpc.ClientConnInterface) PlaygroundClient {
	return &playgroundClient{cc}
}

func (c *playgroundClient) Chat(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Playground_Chat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playgroundClient) GetAppScreen(ctx context.Context, in *GetAppScreenRequest, opts ...grpc.CallOption) (*GetAppScreenResponse, error) {
	out := new(GetAppScreenResponse)
	err := c.cc.Invoke(ctx, Playground_GetAppScreen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playgroundClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Playground_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaygroundServer is the server API for Playground service.
// All implementations should embed UnimplementedPlaygroundServer
// for forward compatibility
type PlaygroundServer interface {
	Chat(context.Context, *Request) (*Response, error)
	GetAppScreen(context.Context, *GetAppScreenRequest) (*GetAppScreenResponse, error)
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedPlaygroundServer should be embedded to have forward compatible implementations.
type UnimplementedPlaygroundServer struct {
}

func (UnimplementedPlaygroundServer) Chat(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedPlaygroundServer) GetAppScreen(context.Context, *GetAppScreenRequest) (*GetAppScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppScreen not implemented")
}
func (UnimplementedPlaygroundServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

// UnsafePlaygroundServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaygroundServer will
// result in compilation errors.
type UnsafePlaygroundServer interface {
	mustEmbedUnimplementedPlaygroundServer()
}

func RegisterPlaygroundServer(s grpc.ServiceRegistrar, srv PlaygroundServer) {
	s.RegisterService(&Playground_ServiceDesc, srv)
}

func _Playground_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Playground_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServer).Chat(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playground_GetAppScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppScreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServer).GetAppScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Playground_GetAppScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServer).GetAppScreen(ctx, req.(*GetAppScreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playground_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Playground_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Playground_ServiceDesc is the grpc.ServiceDesc for Playground service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Playground_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "npi.playground.api.Playground",
	HandlerType: (*PlaygroundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _Playground_Chat_Handler,
		},
		{
			MethodName: "GetAppScreen",
			Handler:    _Playground_GetAppScreen_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Playground_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playground.proto",
}
